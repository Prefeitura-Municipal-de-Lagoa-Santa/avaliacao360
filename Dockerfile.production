# Dockerfile otimizado para produção com multi-stage build
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copia package files
COPY package*.json ./
COPY tsconfig.json ./
COPY vite.config.ts ./
COPY eslint.config.js ./

# Instala dependências do Node.js
RUN npm ci --only=production

# Copia código fonte do frontend
COPY resources/ ./resources/
COPY tailwind.config.ts ./

# Argument para definir ambiente
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Build dos assets
RUN npm run build

# ==========================================
# Estágio principal - aplicação PHP
# ==========================================
FROM ubuntu:22.04

# Evita perguntas interativas durante a instalação
ENV DEBIAN_FRONTEND=noninteractive

# Instala dependências do sistema
RUN apt-get update && apt-get install -y \
    software-properties-common curl git unzip zip ca-certificates \
    nginx supervisor \
    && add-apt-repository ppa:ondrej/php -y \
    && apt-get update \
    && apt-get install -y \
    php8.3-fpm php8.3-mysql php8.3-mbstring php8.3-ldap \
    php8.3-xml php8.3-gd php8.3-curl php8.3-zip php8.3-bcmath \
    php8.3-redis php8.3-opcache \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Instala Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Configura PHP para produção
RUN echo "opcache.enable=1" >> /etc/php/8.3/fpm/php.ini \
    && echo "opcache.memory_consumption=256" >> /etc/php/8.3/fpm/php.ini \
    && echo "opcache.max_accelerated_files=20000" >> /etc/php/8.3/fpm/php.ini \
    && echo "opcache.validate_timestamps=0" >> /etc/php/8.3/fpm/php.ini

# Define diretório de trabalho
WORKDIR /var/www/html

# Copia arquivos da aplicação
COPY . .

# Copia assets buildados do estágio anterior
COPY --from=frontend-builder /app/public/build ./public/build

# Copia arquivos de configuração
COPY docker/nginx.conf /etc/nginx/sites-available/default
COPY docker/supervisord.conf /etc/supervisor/conf.d/app.conf
COPY docker/entrypoint.sh /usr/local/bin/entrypoint.sh

# Configura Nginx
RUN rm -f /etc/nginx/sites-enabled/default && \
    ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default && \
    chmod +x /usr/local/bin/entrypoint.sh

# Instala dependências do Composer (otimizado para produção)
RUN composer install --no-interaction --optimize-autoloader --no-dev --prefer-dist

# Ajusta permissões
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache

# Remove arquivos desnecessários para produção
RUN rm -rf tests/ .git/ .github/ node_modules/ \
    && rm -f .env.example .gitignore README.md

# Expõe porta 80
EXPOSE 80

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Define entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]